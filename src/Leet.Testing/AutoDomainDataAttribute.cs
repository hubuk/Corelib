// -----------------------------------------------------------------------
// <copyright file="AutoDomainDataAttribute.cs" company="Leet">
//     Copyright (c) Leet. All rights reserved.
//     Licensed under the MIT License.
//     See License.txt in the project root for full license information.
// </copyright>
// -----------------------------------------------------------------------

namespace Leet.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Reflection;
    using Ploeh.AutoFixture;
    using Ploeh.AutoFixture.Xunit2;
    using Xunit;
    using Xunit.Abstractions;
    using Xunit.Sdk;

    /// <summary>
    ///     Provides auto-generated data specimens generated by AutoFixture with
    ///     a domain related customizations as an extension to xUnit.net's Theory attribute.
    /// </summary>
    [CLSCompliant(false)]
    [DataDiscoverer("Leet.Testing.AutoDomainDataDiscoverer", "Leet.Testing")]
    public class AutoDomainDataAttribute : AutoDataAttribute
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="AutoDomainDataAttribute"/> class.
        /// </summary>
        public AutoDomainDataAttribute()
            : base(new DeferredFixture())
        {
        }

        /// <summary>
        ///     Returns the data to be used to test the theory.
        /// </summary>
        /// <param name="testMethod">
        ///     The method that is being tested.
        /// </param>
        /// <returns>
        ///     The theory data generated by <see cref="AutoDataAttribute.Fixture"/>.
        /// </returns>
        /// <exception cref="ArgumentNullException">
        ///     <paramref name="testMethod"/> is <see langword="null"/>.
        /// </exception>
        public override IEnumerable<object[]> GetData(MethodInfo testMethod)
        {
            return this.GetData(testMethod, null);
        }

        /// <summary>
        ///     Returns the data to be used to test the theory.
        /// </summary>
        /// <param name="testMethod">
        ///     The method that is being tested.
        /// </param>
        /// <param name="sutModificationMethod">
        ///     Name of the system-under-test modification method to use after its creation.
        /// </param>
        /// <returns>
        ///     The theory data generated by <see cref="AutoDataAttribute.Fixture"/>.
        /// </returns>
        /// <exception cref="ArgumentNullException">
        ///     <paramref name="testMethod"/> is <see langword="null"/>.
        /// </exception>
        public virtual IEnumerable<object[]> GetData(MethodInfo testMethod, string sutModificationMethod)
        {
            if (object.ReferenceEquals(testMethod, null))
            {
                throw new ArgumentNullException(nameof(testMethod));
            }

            object specification = Activator.CreateInstance(testMethod.ReflectedType);
            if (!object.ReferenceEquals(sutModificationMethod, null) &&
                specification is InstanceSpecification customization)
            {
                customization.SutModificationMethod = sutModificationMethod;
            }

            IFixture fixture = DomainFixture.CreateFor(specification);
            DeferredFixture deferredFixture = this.Fixture as DeferredFixture;
            deferredFixture.AssignFixture(fixture);

            return base.GetData(testMethod);
        }
    }
}
